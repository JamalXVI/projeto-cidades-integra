{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/add-city/add-city.component.css","webpack:///./src/app/add-city/add-city.component.html","webpack:///./src/app/add-city/add-city.component.ts","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/cities-table/cities-table.component.css","webpack:///./src/app/cities-table/cities-table.component.html","webpack:///./src/app/cities-table/cities-table.component.ts","webpack:///./src/app/core/constants.ts","webpack:///./src/app/core/endpoints.enum.ts","webpack:///./src/app/core/models/city-dto.model.ts","webpack:///./src/app/core/models/curiosities-dto.model.ts","webpack:///./src/app/core/models/custom-error-state-matcher.model.ts","webpack:///./src/app/core/models/message-encapsuling.model.ts","webpack:///./src/app/core/models/option.model.ts","webpack:///./src/app/core/service/city.service.ts","webpack:///./src/app/core/service/csv.service.ts","webpack:///./src/app/core/service/loading.service.ts","webpack:///./src/app/core/service/state.service.ts","webpack:///./src/app/curiosities/curiosities.component.css","webpack:///./src/app/curiosities/curiosities.component.html","webpack:///./src/app/curiosities/curiosities.component.ts","webpack:///./src/app/home/home.component.css","webpack:///./src/app/home/home.component.html","webpack:///./src/app/home/home.component.ts","webpack:///./src/app/loading-dialog/loading-dialog.component.css","webpack:///./src/app/loading-dialog/loading-dialog.component.html","webpack:///./src/app/loading-dialog/loading-dialog.component.ts","webpack:///./src/app/toolbar/toolbar.component.css","webpack:///./src/app/toolbar/toolbar.component.html","webpack:///./src/app/toolbar/toolbar.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \".main{\\n    width: 80%;\\n    margin: auto;\\n    margin-top: 20px;\\n}\\nmat-card-actions{\\n    margin-left: 5px !important;\\n}\\n.before-form span{\\n    font-family: 'Roboto', sans-serif;\\n    font-weight: normal;\\n    font-size: 20px;\\n    margin-right: 10px;\\n}\\n.parent{\\n    color: #9E9E9E;\\n    cursor: pointer;\\n}\\nmat-card-content, mat-card-actions{\\n    display: flex;\\n    flex-direction: row;\\n    flex-wrap: wrap;;\\n    align-items: baseline;\\n\\n}\\nmat-form-field{\\n    flex: 1 1 auto;\\n    flex-basis: 30%;\\n    margin: 5px;\\n}\\n@media(max-width: 600px){\\n    mat-form-field{\\n        flex-basis: 100%;\\n    }\\n    \\n}\\n@media(max-width: 800px){\\n    mat-form-field{\\n        flex-basis: 40%;\\n    }\\n    \\n}\"","module.exports = \"<div class=\\\"main\\\" *ngIf=\\\"!pageError\\\">\\n  <div class=\\\"before-form\\\">\\n    <span>Adicionar uma nova Cidade</span>\\n  </div>\\n  <form [formGroup]=\\\"form\\\" (ngSubmit)=\\\"sendForm()\\\">\\n    <div class=\\\"main\\\">\\n      <mat-card>\\n        <mat-card-content>\\n          <mat-form-field>\\n            <input matInput placeholder=\\\"ibgeId\\\" formControlName=\\\"ibgeId\\\" [errorStateMatcher]=\\\"matcher\\\" type=\\\"number\\\" />\\n            <mat-icon matPrefix>format_list_numbered</mat-icon>\\n            <mat-hint *ngIf=\\\"form.controls['ibgeId'].pristine\\\">Digite um Id</mat-hint>\\n            <mat-error *ngIf=\\\"form.controls['ibgeId'].hasError('required') && !form.controls['ibgeId'].hasError('pattern') && !form.controls['ibgeId'].hasError('alreadyExists')\\\">\\n              É sério, é só digitar um Id certo.\\n            </mat-error>\\n            <mat-error *ngIf=\\\"form.controls['ibgeId'].hasError('pattern') && !form.controls['ibgeId'].hasError('alreadyExists')\\\">\\n              Um Id só pode conter números sem pontos ou vírgulas.\\n            </mat-error>\\n            <mat-error *ngIf=\\\"form.controls['ibgeId'].hasError('alreadyExists')\\\">\\n              Este id já existe, por favor digite um outro.\\n            </mat-error>\\n          </mat-form-field>\\n          <mat-form-field>\\n            <input matInput placeholder=\\\"Nome\\\" formControlName=\\\"name\\\" [errorStateMatcher]=\\\"matcher\\\" />\\n            <mat-icon matPrefix>supervised_user_circle</mat-icon>\\n            <mat-hint *ngIf=\\\"!form.controls['ibgeId'].pristine && form.controls['name'].pristine\\\">Digite o nome da cidade</mat-hint>\\n            <mat-error *ngIf=\\\"form.controls['name'].hasError('minlength') && !form.controls['name'].hasError('required')\\\">\\n              O nome precisa de no mínimo 3 dígitos\\n            </mat-error>\\n            <mat-error *ngIf=\\\"form.controls['name'].hasError('required')\\\">\\n              Você precisa preencher o nome\\n            </mat-error>\\n          </mat-form-field>\\n          <mat-form-field>\\n            <input matInput placeholder=\\\"Nome sem Acento\\\" formControlName=\\\"nameWithOutAccent\\\" [errorStateMatcher]=\\\"matcher\\\" />\\n            <mat-hint *ngIf=\\\"!form.controls['name'].pristine && form.controls['nameWithOutAccent'].pristine\\\">Digite o\\n              nome sem acento</mat-hint>\\n          </mat-form-field>\\n          <mat-form-field>\\n            <input matInput placeholder=\\\"Nome Alternativo\\\" formControlName=\\\"alternativaName\\\" [errorStateMatcher]=\\\"matcher\\\" />\\n            <mat-hint *ngIf=\\\"!form.controls['nameWithOutAccent'].pristine && form.controls['alternativaName'].pristine\\\">Digite o nome alternativo</mat-hint>\\n          </mat-form-field>\\n          <mat-form-field>\\n            <input matInput placeholder=\\\"Longitude\\\" formControlName=\\\"longitude\\\" type=\\\"number\\\" [errorStateMatcher]=\\\"matcher\\\" />\\n            <mat-hint *ngIf=\\\"!form.controls['alternativaName'].pristine && form.controls['longitude'].pristine\\\">Digite a Longitude</mat-hint>\\n            <mat-error *ngIf=\\\"form.controls['longitude'].hasError('required')\\\">\\n              Você precisa preencher a Longitude\\n            </mat-error>\\n          </mat-form-field>\\n          <mat-form-field>\\n            <input matInput placeholder=\\\"Latitude\\\" formControlName=\\\"latitude\\\" type=\\\"number\\\" [errorStateMatcher]=\\\"matcher\\\" />\\n            <mat-hint *ngIf=\\\"!form.controls['longitude'].pristine && form.controls['latitude'].pristine\\\">Digite a Latitude</mat-hint>\\n            <mat-error *ngIf=\\\"form.controls['latitude'].hasError('required')\\\">\\n              Você precisa preencher a Latitude\\n            </mat-error>\\n          </mat-form-field>\\n          <mat-form-field>\\n            <input matInput placeholder=\\\"Micro Região\\\" formControlName=\\\"microRegion\\\" [errorStateMatcher]=\\\"matcher\\\" />\\n            <mat-hint *ngIf=\\\"!form.controls['latitude'].pristine && form.controls['microRegion'].pristine\\\">Digite a Micro Região</mat-hint>\\n          </mat-form-field>\\n          <mat-form-field>\\n            <input matInput placeholder=\\\"Meso Região\\\" formControlName=\\\"mesoRegion\\\" [errorStateMatcher]=\\\"matcher\\\" />\\n            <mat-hint *ngIf=\\\"!form.controls['microRegion'].pristine && form.controls['mesoRegion'].pristine\\\">Digite a Meso Região</mat-hint>\\n          </mat-form-field>\\n\\n          <mat-checkbox formControlName=\\\"capital\\\">Capital</mat-checkbox>\\n\\n          <mat-form-field>\\n            <mat-select placeholder=\\\"Selecione um Estado\\\" formControlName='stateId'>\\n              <mat-option *ngFor=\\\"let state of states\\\" [value]=\\\"state.id\\\">\\n                {{ state.uf }}\\n              </mat-option>\\n            </mat-select>\\n          </mat-form-field>\\n\\n        </mat-card-content>\\n        <mat-card-actions>\\n          <button mat-raised-button type=\\\"submit\\\" [disabled]=\\\"form.invalid\\\">ADICIONAR</button>\\n        </mat-card-actions>\\n      </mat-card>\\n    </div>\\n  </form>\\n</div>\\n<div class=\\\"main\\\" *ngIf=\\\"pageError\\\">\\n  <h2 class=\\\"mat-display-1\\\">Ah Não!</h2>\\n  <p>Algo deu errado. Verifique se existem estados já preenchidos.</p>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { City } from '../core/models/city.model';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { MatSnackBar } from '@angular/material';\nimport { Router } from '@angular/router';\nimport { CityService } from '../core/service/city.service';\nimport { CustomErrorStateMatcher } from '../core/models/custom-error-state-matcher.model';\nimport { State } from '../core/models/state.model';\nimport { forkJoin } from 'rxjs';\nimport { StateService } from '../core/service/state.service';\nimport { Endpoints } from '../core/endpoints.enum';\nimport { CityDto } from '../core/models/city-dto.model';\n\n@Component({\n  selector: 'app-add-city',\n  templateUrl: './add-city.component.html',\n  styleUrls: ['./add-city.component.css']\n})\nexport class AddCityComponent implements OnInit {\n  form: FormGroup;\n  private matcher = new CustomErrorStateMatcher();\n  states: State[];\n  cities: City[];\n  pageError: boolean = false; \n\n  constructor(private router: Router, private cityService: CityService,\n    private snackBar: MatSnackBar, private stateService: StateService) {\n      forkJoin(this.stateService.getAll(), \n      cityService.getAnyList(Endpoints.ORDER_BY_NAME))\n      .subscribe(result => {\n        if(!!result[0] && !result[0].message && !!result[0].payload){\n          this.states = result[0].payload;\n        }else{\n          this.pageError = true;\n        }\n        if(!!result[1]){\n          if(!!result[1].message){\n            this.openSnackBar(result[1].message.toString());\n          }else{\n            this.cities = result[1].payload;\n          }\n        }\n      });\n  }\n\n  ngOnInit() {\n    this.form = new FormGroup({\n      ibgeId: new FormControl('', [\n        Validators.required,\n        Validators.pattern('^[1-9][0-9]*$')\n      ]),\n      name: new FormControl('', [\n        Validators.required,\n        Validators.minLength(3)\n      ]),\n      nameWithOutAccent: new FormControl('', [\n      ]),\n      capital: new FormControl('', [\n        Validators.required\n      ]),\n      alternativaName: new FormControl('', [\n      ]),\n      microRegion: new FormControl('', [\n      ]),\n      mesoRegion: new FormControl('', [\n      ]),\n      stateId: new FormControl('', [\n        Validators.required\n      ]),\n      longitude: new FormControl('', [\n        Validators.required\n      ]),\n      latitude: new FormControl('', [\n        Validators.required\n      ]),\n    });\n  }\n  sendForm() {\n    if (this.form.valid) {\n      const idError: boolean = this.cities.filter(city => city.ibgeId === +this.form.value.id).length > 0;\n      if (!idError) {\n        const city = new CityDto(Object.assign({}, this.form.value));\n        this.cityService.add(city).subscribe(\n          (res) => {\n            if(!!res.message){\n              this.openSnackBar(res.message.toString());\n            }\n          }\n        )\n      } else {\n        if (idError) {\n          this.form.controls['id'].setErrors({ alreadyExists: true });\n        }\n      }\n    }\n  }\n  openSnackBar(message: string) {\n    this.snackBar.open(message, '', {\n      duration: 1500,\n    });\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { HomeComponent } from './home/home.component';\nimport { CuriositiesComponent } from './curiosities/curiosities.component';\nimport { AddCityComponent } from './add-city/add-city.component';\n\nconst routes: Routes = [\n  { path: '', pathMatch: 'full', redirectTo: 'home' },\n  {\n      path: 'home',\n      component: HomeComponent\n  },\n  {\n      path: 'curiosities',\n      component: CuriositiesComponent\n  },\n  {\n      path: 'add',\n      component: AddCityComponent\n  },\n];\n@NgModule({\n  imports: [\n      RouterModule.forRoot(routes)\n  ],\n  exports: [\n      RouterModule\n  ],\n})\nexport class AppRoutingModule { }\n","module.exports = \"\"","module.exports = \"<app-toolbar></app-toolbar>\\n<router-outlet></router-outlet>\\n\"","import { Component } from '@angular/core';\n\nimport { MatDialog } from '@angular/material/dialog';\n\nimport { distinctUntilChanged } from 'rxjs/operators';\n\nimport { LoadingService } from './core/service/loading.service';\nimport { LoadingDialogComponent } from './loading-dialog/loading-dialog.component';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  \n  constructor(private dialog: MatDialog, private loadingService: LoadingService){\n    /**\n     * Detect loading changes and call or dismiss the service\n     */\n    this.loadingService.isLoading()\n    .pipe(distinctUntilChanged())\n    .subscribe(isLoading => {\n      if(isLoading){\n        this.dialog.open(LoadingDialogComponent, {\n          minHeight: \"200px\",\n          disableClose: true\n        });\n      }else{\n        this.dialog.closeAll();\n      }\n    });    \n  }\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\nimport { HttpModule } from '@angular/http';\n\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport {\n  faSearch,\n  faCheckCircle,\n  faTrashAlt\n} from '@fortawesome/free-solid-svg-icons';\n\n/** Material Design Modules */\nimport {MatToolbarModule} from '@angular/material/toolbar';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSnackBarModule} from '@angular/material/snack-bar';\nimport {MatProgressSpinnerModule} from '@angular/material/progress-spinner';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatIconModule} from '@angular/material/icon';\nimport { MatTableModule, MatPaginatorModule, MatSortModule, MatInputModule, MatCardModule, MatCheckboxModule } from '@angular/material';\n\n\nimport { AppComponent } from './app.component';\nimport { ToolbarComponent } from './toolbar/toolbar.component';\nimport { HomeComponent } from './home/home.component';\nimport { AppRoutingModule } from './app-routing.module';\nimport { LoadingDialogComponent } from './loading-dialog/loading-dialog.component';\nimport { CitiesTableComponent } from './cities-table/cities-table.component';\nimport { CuriositiesComponent } from './curiosities/curiosities.component';\nimport { AddCityComponent } from './add-city/add-city.component';\n\n/** Add Fort-Awesome icons into the library */\nlibrary.add(faSearch, faCheckCircle, faTrashAlt);\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    ToolbarComponent,\n    HomeComponent,\n    LoadingDialogComponent,\n    CitiesTableComponent,\n    CuriositiesComponent,\n    AddCityComponent\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    MatToolbarModule,\n    MatButtonModule,\n    MatSnackBarModule,\n    MatProgressSpinnerModule,\n    MatDialogModule,\n    MatSelectModule,\n    MatTableModule, \n    MatPaginatorModule, \n    MatSortModule,\n    MatIconModule,\n    MatInputModule,\n    MatCardModule,\n    MatCheckboxModule,\n    AppRoutingModule,\n    FormsModule,\n    ReactiveFormsModule,\n    FontAwesomeModule,\n    HttpClientModule,\n    HttpModule\n\n  ],\n  entryComponents: [LoadingDialogComponent],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","module.exports = \"\"","module.exports = \"<div class=\\\"mat-elevation-z8 tabela\\\">\\n  <mat-table #table [dataSource]=\\\"dataSource\\\" matSort aria-label=\\\"Elements\\\">\\n\\n    <!-- The IbgeId Column -->\\n    <ng-container matColumnDef=\\\"ibgeId\\\">\\n      <mat-header-cell *matHeaderCellDef>\\n        <mat-form-field>\\n          <input type=\\\"text\\\" matInput placeholder='Num. IBGE' (input)=\\\"search$.next({search: $event.target.value, prop: 'ibgeId'})\\\" />\\n        </mat-form-field>\\n        <span mat-sort-header></span>\\n      </mat-header-cell>\\n      <mat-cell *matCellDef=\\\"let row\\\">{{row.ibgeId}}</mat-cell>\\n    </ng-container>\\n\\n    <!-- The state Column -->\\n    <ng-container matColumnDef=\\\"state\\\">\\n      <mat-header-cell *matHeaderCellDef>\\n        <mat-form-field>\\n          <input type=\\\"text\\\" matInput placeholder='Estado' (input)=\\\"search$.next({search: $event.target.value, prop: 'state'})\\\" />\\n        </mat-form-field>\\n        <span mat-sort-header></span>\\n      </mat-header-cell>\\n      <mat-cell *matCellDef=\\\"let row\\\">{{row.state.uf}}</mat-cell>\\n    </ng-container>\\n\\n    <!-- The name Column -->\\n    <ng-container matColumnDef=\\\"name\\\">\\n      <mat-header-cell *matHeaderCellDef>\\n        <mat-form-field>\\n          <input type=\\\"text\\\" matInput placeholder='Nome' (input)=\\\"search$.next({search: $event.target.value, prop: 'name'})\\\" />\\n        </mat-form-field>\\n        <span mat-sort-header></span>\\n      </mat-header-cell>\\n      <mat-cell *matCellDef=\\\"let row\\\">{{row.name}}</mat-cell>\\n    </ng-container>\\n\\n    <!-- The nameWithOutAccent Column -->\\n    <ng-container matColumnDef=\\\"nameWithOutAccent\\\">\\n      <mat-header-cell *matHeaderCellDef>\\n        <mat-form-field>\\n          <input type=\\\"text\\\" matInput placeholder='Nome Sem Ac.' (input)=\\\"search$.next({search: $event.target.value, prop: 'nameWithOutAccent'})\\\" />\\n        </mat-form-field>\\n        <span mat-sort-header></span>\\n      </mat-header-cell>\\n      <mat-cell *matCellDef=\\\"let row\\\">{{row.nameWithOutAccent}}</mat-cell>\\n    </ng-container>\\n\\n    <!-- The alternativaName Column -->\\n    <ng-container matColumnDef=\\\"alternativaName\\\">\\n      <mat-header-cell *matHeaderCellDef>\\n        <mat-form-field>\\n          <input type=\\\"text\\\" matInput placeholder='Nome Alt.' (input)=\\\"search$.next({search: $event.target.value, prop: 'alternativaName'})\\\" />\\n        </mat-form-field>\\n        <span mat-sort-header></span>\\n      </mat-header-cell>\\n      <mat-cell *matCellDef=\\\"let row\\\">{{row.alternativaName}}</mat-cell>\\n    </ng-container> \\n\\n    <!-- The capital Column -->\\n    <ng-container matColumnDef=\\\"capital\\\">\\n      <mat-header-cell *matHeaderCellDef>\\n        <mat-form-field>\\n            <mat-select placeholder=\\\"Capital\\\" (selectionChange)=\\\"onCapitalChange($event)\\\">\\n              <mat-option [value]=\\\"true\\\">\\n                Sim\\n              </mat-option>\\n              <mat-option [value]=\\\"false\\\">\\n                Não\\n              </mat-option>\\n              <mat-option [value]=\\\"\\\">\\n                Todos\\n              </mat-option>\\n            </mat-select>\\n        </mat-form-field>\\n        <span mat-sort-header></span>\\n      </mat-header-cell>\\n      <mat-cell *matCellDef=\\\"let row\\\"><fa-icon [style.color]=\\\"'#4caf50'\\\" *ngIf=\\\"!!row.capital\\\" [icon]=\\\"['fas', 'check-circle']\\\"></fa-icon></mat-cell>\\n    </ng-container>\\n\\n    <!-- The longitude Column -->\\n    <ng-container matColumnDef=\\\"longitude\\\">\\n      <mat-header-cell *matHeaderCellDef>\\n        <mat-form-field>\\n          <input type=\\\"text\\\" matInput placeholder='Longitude' (input)=\\\"search$.next({search: $event.target.value, prop: 'longitude'})\\\" />\\n        </mat-form-field>\\n        <span mat-sort-header></span>\\n      </mat-header-cell>\\n      <mat-cell *matCellDef=\\\"let row\\\">{{row.longitude |  number:'1.3-3'}}</mat-cell>\\n    </ng-container>\\n\\n    <!-- The longitude Column -->\\n    <ng-container matColumnDef=\\\"latitude\\\">\\n      <mat-header-cell *matHeaderCellDef>\\n        <mat-form-field>\\n          <input type=\\\"text\\\" matInput placeholder='Latitude' (input)=\\\"search$.next({search: $event.target.value, prop: 'latitude'})\\\" />\\n        </mat-form-field>\\n        <span mat-sort-header></span>\\n      </mat-header-cell>\\n      <mat-cell *matCellDef=\\\"let row\\\">{{row.latitude |  number:'1.3-3'}}</mat-cell>\\n    </ng-container>\\n\\n    <!-- The microRegion Column -->\\n    <ng-container matColumnDef=\\\"microRegion\\\">\\n      <mat-header-cell *matHeaderCellDef>\\n        <mat-form-field>\\n          <input type=\\\"text\\\" matInput placeholder='Micro Região' (input)=\\\"search$.next({search: $event.target.value, prop: 'microRegion'})\\\" />\\n        </mat-form-field>\\n        <span mat-sort-header></span>\\n      </mat-header-cell>\\n      <mat-cell *matCellDef=\\\"let row\\\">{{row.microRegion}}</mat-cell>\\n    </ng-container>\\n\\n    <!-- The mesoRegion Column -->\\n    <ng-container matColumnDef=\\\"mesoRegion\\\">\\n      <mat-header-cell *matHeaderCellDef>\\n        <mat-form-field>\\n          <input type=\\\"text\\\" matInput placeholder='Meso Região' (input)=\\\"search$.next({search: $event.target.value, prop: 'mesoRegion'})\\\" />\\n        </mat-form-field>\\n        <span mat-sort-header></span>\\n      </mat-header-cell>\\n      <mat-cell *matCellDef=\\\"let row\\\">{{row.mesoRegion}}</mat-cell>\\n    </ng-container>\\n\\n    <!-- The actions Column -->\\n    <ng-container matColumnDef=\\\"actions\\\">\\n        <mat-header-cell *matHeaderCellDef>\\n          Ações\\n        </mat-header-cell>\\n        <mat-cell *matCellDef=\\\"let row\\\">\\n            <button mat-raised-button class=\\\"remove-btn\\\" color=\\\"accent\\\" (click)=\\\"onRemove(row.ibgeId)\\\">\\n                <fa-icon [icon]=\\\"['fas', 'trash-alt']\\\"></fa-icon>\\n              </button>\\n        </mat-cell>\\n      </ng-container>\\n\\n    <mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></mat-header-row>\\n    <mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></mat-row>\\n  </mat-table>\\n\\n  <mat-paginator #paginator\\n    [length]=\\\"dataSource.data.length\\\"\\n    [pageIndex]=\\\"0\\\"\\n    [pageSize]=\\\"defaultPageSize\\\"\\n    [pageSizeOptions]=\\\"pageSizes\\\">\\n  </mat-paginator>\\n</div>\"","import { Component, OnInit, ViewChild, Input, Output } from '@angular/core';\nimport { MatPaginator, MatSort, MatTableDataSource } from '@angular/material';\nimport { Subject } from 'rxjs/internal/Subject';\nimport { City } from '../core/models/city.model';\nimport { DEFAULT_PAGE_SIZE_OPTION, PAGE_SIZE_OPTIONS, CityFilter } from '../core/constants';\nimport { map, distinctUntilChanged } from 'rxjs/operators';\nimport { set } from 'lodash';\nimport { EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'app-cities-table',\n  templateUrl: './cities-table.component.html',\n  styleUrls: ['./cities-table.component.css']\n})\nexport class CitiesTableComponent implements OnInit {\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n  @ViewChild(MatSort) sort: MatSort;\n\n  private _cities: City[];\n  get cities(): City[] {\n    // transform value for display\n    return this._cities;\n  }\n  \n  @Input()\n  set cities(cities: City[]) {\n    this._cities = cities;\n    this.fullfillCities();\n  }\n  @Output() removeCity = new EventEmitter();\n  search$: Subject<any> = new Subject<any>();\n  filters: any = {};\n  dataSource: MatTableDataSource<City>;\n  defaultPageSize: Number = DEFAULT_PAGE_SIZE_OPTION;\n  pageSizes: Number[] = PAGE_SIZE_OPTIONS;\n\n  /** Columns displayed in the table. Columns IDs can be added, removed, or reordered. */\n  displayedColumns = ['ibgeId', 'state', 'name', 'nameWithOutAccent', 'alternativaName',\n    'capital', 'longitude', 'latitude', 'microRegion', 'mesoRegion', 'actions'];\n  constructor() {\n    this.search$.pipe(map(query => query || ''), distinctUntilChanged(),\n      map((column: { search: any, prop: string }) => set(this.filters, column.prop, column.search)))\n      .subscribe(filters => this.dataSource.filter = JSON.stringify(filters));\n  }\n\n  ngOnInit() {\n    this.fullfillCities();\n  }\n  private fullfillCities(){\n    this.dataSource = new MatTableDataSource(this.cities);\n    this.dataSource.sort = this.sort;\n    this.dataSource.paginator = this.paginator;\n    this.dataSource.filterPredicate = this.createFilter();\n  }\n  createFilter(): (data: City, filter: string) => boolean {\n    const filterFunction = function (data, filter): boolean {\n      const searchTerms = JSON.parse(filter);\n      return CityFilter(data, searchTerms);\n    };\n    return filterFunction;\n  }\n  onCapitalChange($event){\n    this.search$.next({search: $event.value, prop: 'capital'});\n  }\n  onRemove(id){\n    if(!!id){\n      this.removeCity.emit(id);\n    }\n  }\n}\n","import { MatPaginatorIntl } from '@angular/material';\nimport { City } from './models/city.model';\n\nexport const PAGE_SIZE_OPTIONS = [5, 10, 15, 20];\nexport const DEFAULT_PAGE_SIZE_OPTION = 10;\n\nexport function CityFilter(city: City, filters: any): boolean {\n    if ((!filters.name || city.name &&\n        city.name.toLowerCase().includes(filters.name.toLowerCase())) &&\n        (!filters.ibgeId || city.ibgeId.toString().includes(filters.ibgeId)) &&\n        (!filters.state || city.state && city.state.uf && \n            city.state.uf.toLowerCase().includes(filters.state.toLowerCase())) &&\n        (!filters.nameWithOutAccent ||\n            city.nameWithOutAccent && city.nameWithOutAccent.toLowerCase()\n                .includes(filters.nameWithOutAccent.toLowerCase())) &&\n        (!filters.alternativaName || city.alternativaName && city.alternativaName.toLowerCase()\n            .includes(filters.alternativaName.toLowerCase())) &&\n        (!filters.capital || city.capital == !!filters.capital) &&\n        (!filters.longitude || city.longitude.toString().includes(filters.longitude)) &&\n        (!filters.latitude || city.latitude.toString().includes(filters.latitude)) &&\n        (!filters.microRegion || city.microRegion.toLowerCase()\n            .includes(filters.toLowerCase().microRegion)) &&\n        (!filters.mesoRegion || city.mesoRegion.toLowerCase()\n            .includes(filters.toLowerCase().mesoRegion))) {\n        return true;\n    }\n    return false;\n}\n\nexport class CustomPaginatorLabels extends MatPaginatorIntl {\n    itemsPerPageLabel = 'Itens por Página';\n    nextPageLabel = 'Próxima Página';\n    previousPageLabel = 'Página Anterior';\n}","export enum Endpoints{\n    FOOBAR=\"/api/foo\",\n    UPLOAD=\"/api/upload\",\n    ORDER_BY_NAME=\"/api/cities/orderedByName\",\n    CITIES_NUMBER=\"/api/cities/count\",\n    ADD_CITY=\"/api/cities/add\",\n    SELECTED_CITY=\"/api/cities/getId\",\n    REMOVE_CITY_ID=\"/api/cities/removeId\",\n    FILTER_BY_STATE=\"/api/cities/stateFilter\",\n    ORDER_BY_NAME_ONLY_CAPITALS=\"/api/cities/orderedByNameOnlyCapitals\",\n    MOST_DISTANCE=\"/api/cities/mostDistance\",\n    HIGHEST_AND_LOWEST_STATE=\"/api/state/hightestAndLowest\",\n    ALL_STATES=\"/api/state/findAll\"\n}","export class CityDto{\n    ibgeId: Number;\n    stateId: Number;\n    name: String;\n    nameWithOutAccent: String;\n    alternativaName: String;\n    capital: Boolean;\n    longitude: Number;\n    latitude: Number;\n    microRegion: String;\n    mesoRegion: String;\n\n    constructor(obj?: any){\n        this.ibgeId = obj && obj.ibgeId || new Number(0);\n        this.stateId = obj && obj.stateId || new Number(0);\n        this.name = obj && obj.name || new String();\n        this.nameWithOutAccent = obj && obj.nameWithOutAccent || new String();\n        this.alternativaName = obj && obj.alternativaName || new String();\n        this.capital = obj && obj.capital || new Boolean(false);\n        this.longitude = obj && obj.longitude || new Number(0);\n        this.latitude = obj && obj.latitude || new Number(0);\n        this.microRegion = obj && obj.microRegion || new String();\n        this.mesoRegion = obj && obj.mesoRegion || new String();\n    }\n}","import { StateCounterDto } from \"./state-counter-dto.model\";\nimport { City } from \"./city.model\";\n\nexport class CuriositiesDto{\n    stateCounterDto:StateCounterDto[];\n    numberOfCities: Number;\n    mostDistancedCities: City[];\n    constructor(obj?: any){\n        this.stateCounterDto = obj && obj.stateCounterDto || {};\n        this.numberOfCities = obj && obj.numberOfCities || new Number(0);\n        this.mostDistancedCities = obj && obj.mostDistancedCities || [];\n    }\n}","import { FormControl, FormGroupDirective, NgForm, Validators } from '@angular/forms';\n\nimport { ErrorStateMatcher } from '@angular/material/core';\n\nexport class CustomErrorStateMatcher implements ErrorStateMatcher {\n    isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n        const isSubmitted = form && form.submitted;\n        return !!(control && control.invalid && (control.dirty || control.touched || isSubmitted));\n    }\n}","export class MessageEncapsuling<K>{\n    public message: String;\n    public payload: K;\n    constructor(obj?:any){\n        this.message = obj && obj.message || '';\n        this.payload = obj && obj.payload || {};\n    }\n}","export class Option{\n    name: string;\n    value: any;\n    constructor(obj?:any){\n        this.name = obj && obj.name || '';\n        this.value = obj && obj.value || {};\n    }\n}","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { HttpClient } from '@angular/common/http';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\nimport { map, catchError, finalize } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\n\nimport { Endpoints } from \"../endpoints.enum\";\nimport { MessageEncapsuling } from '../models/message-encapsuling.model';\nimport { LoadingService } from './loading.service';\nimport { City } from '../models/city.model';\nimport { CityDto } from '../models/city-dto.model';\n\n@Injectable({ providedIn: 'root' })\nexport class CityService {\n\n    constructor(\n        protected router: Router,\n        protected http: HttpClient,\n        private snackBar: MatSnackBar,\n        private loadingService: LoadingService) {\n\n    }\n    /**\n     * Go to any endpoint that returns a list os cities\n     * @param endpoint the endpoint to make request\n     * @param params any aditionalparams\n     * @return the MessageEncapsuling containing the list of cities\n     */\n    public getAnyList(endpoint: Endpoints, params?: any): Observable<MessageEncapsuling<City[]>> {\n        this.loadingService.setLoading();\n        return this.http.get(endpoint, params || {})\n            .pipe(map(res => new MessageEncapsuling<City[]>(res)),\n                catchError((error: any) => {\n                    this.snackBar.open((<MessageEncapsuling<City[]>>error.error).message.toString());\n                    return Observable.throw(error);\n                }), finalize(() => this.loadingService.unLoad()));\n    }\n\n    /**\n     * Get the number of cities\n     * @return the MessageEncapsuling containing the number of cities\n     */\n    public getCount(): Observable<MessageEncapsuling<Number>> {\n        this.loadingService.setLoading();\n        return this.http.get(Endpoints.CITIES_NUMBER)\n            .pipe(map(res => new MessageEncapsuling<Number>(res)),\n                catchError((error: any) => {\n                    this.snackBar.open((<MessageEncapsuling<Number>>error.error).message.toString());\n                    return Observable.throw(error);\n                }), finalize(() => this.loadingService.unLoad()));\n    }\n\n    /**\n     * Get a specific city\n     * @return the MessageEncapsuling containing the selected city\n     */\n    public getCity(ibgeId: Number): Observable<MessageEncapsuling<City>> {\n        this.loadingService.setLoading();\n        return this.http.get(Endpoints.SELECTED_CITY, { params: { \"ibgeId\": ibgeId.toString() } })\n            .pipe(map(res => new MessageEncapsuling<City>(res), ibgeId),\n                catchError((error: any) => {\n                    this.snackBar.open((<MessageEncapsuling<City>>error.error).message.toString());\n                    return Observable.throw(error);\n                }), finalize(() => this.loadingService.unLoad()));\n    }\n    /**\n     * Send a CityDto to back add the city, returning just the system message\n     * @param dto the city Dto\n     */\n    public add(dto: CityDto): Observable<MessageEncapsuling<any>> {\n        this.loadingService.setLoading();\n        return this.http.post(Endpoints.ADD_CITY.toString(), dto)\n            .pipe(map(res => new MessageEncapsuling<any>(res)),\n                catchError((error: any) => {\n                    this.snackBar.open((<MessageEncapsuling<any>>error.error).message.toString());\n                    return Observable.throw(error);\n                }), finalize(() => this.loadingService.unLoad()));\n    }\n    /**\n     * remove selectedCity by id returning just the system message\n     * @param ibgeId the city id\n     */\n    public remove(ibgeId: Number): Observable<MessageEncapsuling<any>> {\n        this.loadingService.setLoading();\n        return this.http.delete(Endpoints.REMOVE_CITY_ID.toString(), {\n            params: {\"ibgeId\": ibgeId.toString()}\n        })\n            .pipe(map(res => new MessageEncapsuling<any>(res)),\n                catchError((error: any) => {\n                    this.snackBar.open((<MessageEncapsuling<any>>error.error).message.toString());\n                    return Observable.throw(error);\n                }), finalize(() => this.loadingService.unLoad()));\n    }\n}","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { HttpClient } from '@angular/common/http';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\nimport { map, catchError, finalize } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\n\nimport { Endpoints } from \"../endpoints.enum\";\nimport { MessageEncapsuling } from '../models/message-encapsuling.model';\nimport { LoadingService } from './loading.service';\n\n@Injectable({ providedIn: 'root' })\nexport class CsvService {\n    constructor(\n        protected router: Router,\n        protected http: HttpClient,\n        private snackBar: MatSnackBar,\n        private loadingService: LoadingService) {\n\n    }\n    /**\n     * Send an String-encoded file to the UPLOAD endpoint and expects no payload of return,\n     * just the system message\n     * @param csvBase64 the String enconded file\n     */\n    public upload(csvBase64: String): Observable<MessageEncapsuling<any>> {\n        this.loadingService.setLoading();\n        return this.http.post(Endpoints.UPLOAD.toString(), csvBase64)\n            .pipe(map(res => new MessageEncapsuling<any>(res)),\n                catchError((error: any) => {\n                    this.snackBar.open((<MessageEncapsuling<any>>error.error).message.toString());\n                    return Observable.throw(error);\n                }), finalize(() => this.loadingService.unLoad()));\n    }\n}","import { Injectable } from \"@angular/core\";\nimport { Subject, Observable } from \"rxjs\";\n\n\n@Injectable({ providedIn: 'root' })\nexport class LoadingService{\n    private loading: Subject<boolean> = new Subject<boolean>();\n    private loadCounts: number = 0;\n    /**\n     * Actives the loading screen\n     */\n    public setLoading(): void{\n        this.loadCounts++;\n        this.loading.next(true)\n    }\n\n    /**\n     * Remove one load item from index\n     */\n    public unLoad(): void{\n        this.loadCounts--;\n        if(this.loadCounts <= 0){\n            this.loading.next(false);\n        }\n    }\n    /**\n     * Check if is Loading\n     */\n    public isLoading(): Subject<boolean>{\n        return this.loading;\n    }\n}","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { HttpClient } from '@angular/common/http';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\nimport { map, catchError, finalize } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\n\nimport { Endpoints } from \"../endpoints.enum\";\nimport { MessageEncapsuling } from '../models/message-encapsuling.model';\nimport { LoadingService } from './loading.service';\nimport { StateCounterDto } from '../models/state-counter-dto.model';\nimport { State } from '../models/state.model';\n\n@Injectable({ providedIn: 'root' })\nexport class StateService{\n\n    constructor(\n        protected router: Router,\n        protected http: HttpClient,\n        private snackBar: MatSnackBar,\n        private loadingService: LoadingService) {\n\n    }\n    /**\n     * Return the highest and the lowest state ranked by number of cities\n     * @returns the MessageEncapsuling containing the highest and lowest\n     */\n    public getHightestAndLowest(): Observable<MessageEncapsuling<StateCounterDto[]>>{\n        this.loadingService.setLoading();\n        return this.http.get(Endpoints.HIGHEST_AND_LOWEST_STATE)\n        .pipe(map(res => new MessageEncapsuling<StateCounterDto[]>(res)),\n        catchError((error: any) => {\n            this.snackBar.open((<MessageEncapsuling<StateCounterDto[]>>error.error).message.toString());\n            return Observable.throw(error);\n        }), finalize(() => this.loadingService.unLoad()));\n    }\n    /**\n     * Return all the states\n     * @returns the MessageEncapsuling containing the highest and lowest\n     */\n    public getAll(): Observable<MessageEncapsuling<State[]>>{\n        this.loadingService.setLoading();\n        return this.http.get(Endpoints.ALL_STATES)\n        .pipe(map(res => new MessageEncapsuling<State[]>(res)),\n        catchError((error: any) => {\n            this.snackBar.open((<MessageEncapsuling<State[]>>error.error).message.toString());\n            return Observable.throw(error);\n        }), finalize(() => this.loadingService.unLoad()));\n    }\n}","module.exports = \".main{\\n    width: 80%;\\n    margin: auto;\\n    margin-top: 20px;\\n}\"","module.exports = \"<div class=\\\"main\\\">\\n  <div *ngIf=\\\"!!errorPage\\\">\\n    <h2 class=\\\"mat-display-1\\\">Ah Não!</h2>\\n    <p>Algo deu errado. Erros: {{errorMessages}}</p>\\n\\n  </div>\\n  <div *ngIf=\\\"!errorPage\\\">\\n    <div *ngIf=\\\"curiosities.mostDistancedCities.length > 0\\\">\\n      <h3 class=\\\"mat-subheading-2\\\">As Cidades mais distantes uma da outra</h3>\\n      <hr />\\n      <p class=\\\"mat-body-1\\\">\\n        As cidades mais distantes uma da outra\\n        são {{curiosities.mostDistancedCities[0].name}}\\n        e a(o) {{curiosities.mostDistancedCities[1].name}}\\n      </p>\\n    </div>\\n    <div *ngIf=\\\"curiosities.numberOfCities > 0\\\">\\n      <h3 class=\\\"mat-subheading-2\\\">O Total de Cidades</h3>\\n      <hr />\\n      <p class=\\\"mat-body-1\\\">\\n        O total de cidades é de {{curiosities.numberOfCities}}\\n      </p>\\n    </div>\\n    <div *ngIf=\\\"curiosities.stateCounterDto.length > 0\\\">\\n      <h3 class=\\\"mat-subheading-2\\\">Os estados com o maior e o menor número de cidades.</h3>\\n      <hr />\\n      <p class=\\\"mat-body-1\\\">\\n        O estado com o maior número de cidades é o {{curiosities.stateCounterDto[0].state.uf}}\\n        com {{curiosities.stateCounterDto[0].numberOfCities}} cidade(s) e o estado com o menor número de\\n        cidades é o {{curiosities.stateCounterDto[1].state.uf}}\\n        com {{curiosities.stateCounterDto[1].numberOfCities}} cidade(s)\\n      </p>\\n    </div>\\n  </div>\\n</div>\"","import { Component, OnInit } from '@angular/core';\n\nimport { forkJoin } from 'rxjs';\n\nimport { StateService } from '../core/service/state.service';\nimport { CityService } from '../core/service/city.service';\nimport { Endpoints } from '../core/endpoints.enum';\nimport { MessageEncapsuling } from '../core/models/message-encapsuling.model';\nimport { CuriositiesDto } from '../core/models/curiosities-dto.model';\n\n@Component({\n  selector: 'app-curiosities',\n  templateUrl: './curiosities.component.html',\n  styleUrls: ['./curiosities.component.css']\n})\nexport class CuriositiesComponent implements OnInit {\n  errorPage: boolean = false;\n  errorMessages: string = \"\";\n  curiosities:  CuriositiesDto = new CuriositiesDto();\n  constructor(\n    private stateService: StateService,\n    private cityService: CityService) {\n      forkJoin(this.stateService.getHightestAndLowest(),\n      cityService.getCount(),\n      cityService.getAnyList(Endpoints.MOST_DISTANCE))\n      .subscribe((result:MessageEncapsuling<any>[]) => {\n        for(let message of result){\n          if(!!message.message || !message.payload){\n            this.errorPage = true;\n            this.errorMessages += message.message+\" / \";\n          }\n        }\n        if(!this.errorPage){\n          this.curiosities.stateCounterDto = result[0].payload\n          this.curiosities.numberOfCities = result[1].payload;\n          this.curiosities.mostDistancedCities = result[2].payload;\n        }\n      })\n  }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \".main{\\n    width: 80%;\\n    margin: auto;\\n}\\n.spacer{\\n    flex: 1 1 auto;\\n}\\n.form-group{\\n    display: flex;\\n}\\n.mat-display-1, .mat-subheading-2{\\n    margin-bottom: 0px;\\n    margin-top: 20px;\\n}\\nbutton{\\n    max-height: 36px;\\n}\\n.search-button{\\n    margin-left: 15px;\\n}\\n.id-search{\\n    display: inline;\\n    margin-left: 10px;\\n}\\n.state-search{\\n    display: inline-block;\\n    max-width: 200px;\\n    margin-left: 15px;\\n}\"","module.exports = \"<div class=\\\"main\\\">\\n  <h1 class=\\\"mat-display-1\\\">Seja Bem-Vindo ao Contre de Cidades!</h1>\\n  <hr />\\n  <p class=\\\"mat-body-1\\\">\\n    Para começar basta inserir a planilha (em formato CSV) no botão indicado.\\n  </p>\\n  <p [hidden]=\\\"!fileName\\\" class=\\\"mat-body-2\\\">\\n    Último Arquivo Carregado: <span [style.color]=\\\"'red'\\\">{{fileName}}</span>.<br />\\n    Para você carregar um novo Arquivo você deve clicar em limpar.\\n  </p>\\n  <form [formGroup]=\\\"form\\\">\\n    <div class=\\\"form-group\\\">\\n      <button mat-raised-button color=\\\"primary\\\" (click)=\\\"openInput()\\\" [disabled]=\\\"!!fileName\\\">\\n        Selecionar Planilha\\n      </button>\\n      <span class=\\\"spacer\\\"></span>\\n      <input type=\\\"file\\\" style=\\\"display: none\\\" id=\\\"file\\\" (change)=\\\"onFileChange($event)\\\" #fileInput>\\n      <button id=\\\"clean\\\" type=\\\"button\\\" [disabled]=\\\"!fileName\\\" mat-raised-button class=\\\"btn btn-sm btn-default\\\" (click)=\\\"clearFile()\\\"\\n        [disabled]=\\\"loading\\\">Limpar</button>\\n    </div>\\n  </form>\\n  <div>\\n    <h3 class=\\\"mat-subheading-2\\\">Lista de Cidades</h3>\\n    <hr />\\n    <div class=\\\"search-fields\\\">\\n      <mat-form-field>\\n        <mat-select placeholder=\\\"Selecione um Filtro\\\" (selectionChange)=\\\"onChangeFilter()\\\" #filter>\\n          <mat-option *ngFor=\\\"let option of options\\\" [value]=\\\"option.value\\\">\\n            {{option.name}}\\n          </mat-option>\\n        </mat-select>\\n      </mat-form-field>\\n      <div *ngIf=\\\"!!searchById\\\" class=\\\"id-search\\\">\\n        <mat-form-field>\\n          <input matInput type=\\\"number\\\" placeholder=\\\"Escolha um Id\\\" #cityId>\\n        </mat-form-field>\\n      </div>\\n      <div *ngIf=\\\"!!searchByState\\\" class=\\\"state-search\\\">\\n        <mat-select placeholder=\\\"Selecione um Estado\\\" #filterState>\\n          <mat-option *ngFor=\\\"let state of states\\\" [value]=\\\"state.id\\\">\\n            {{state.uf}}\\n          </mat-option>\\n        </mat-select>\\n      </div>\\n      <button mat-raised-button class=\\\"search-button\\\" color=\\\"primary\\\" (click)=\\\"onSearch()\\\">\\n        Pesquisar <fa-icon [icon]=\\\"['fas', 'search']\\\"></fa-icon>\\n      </button>\\n    </div>\\n    <div [hidden]=\\\"!cities || !!cities && cities.length <= 0\\\">\\n      <app-cities-table [cities]=\\\"cities\\\" (removeCity)=\\\"onRemove($event)\\\"></app-cities-table>\\n    </div>\\n  </div>\\n</div>\"","import { Component, ViewChild, ElementRef } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\n\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { MatSelect } from '@angular/material/select';\n\nimport { CsvService } from '../core/service/csv.service';\nimport { CityService } from '../core/service/city.service';\nimport { StateService } from '../core/service/state.service';\nimport { Option } from '../core/models/option.model';\nimport { City } from '../core/models/city.model';\nimport { State } from '../core/models/state.model';\nimport { MessageEncapsuling } from '../core/models/message-encapsuling.model';\nimport { Endpoints } from '../core/endpoints.enum';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})\nexport class HomeComponent {\n  form: FormGroup;\n  fileName: string = '';\n  cities: City[] = [];\n  searchById: boolean = false;\n  states: State[] = [];\n  searchByState: boolean = false;\n  options: Option[] = [new Option({ name: 'Ordernar por Nome', value: 'orderByName' }),\n  new Option({ name: 'Ordernar por Nome Somente Capitais', value: 'orderByNameOnlyCaptals' }),\n  new Option({ name: 'Selecionar Cidade Específica', value: 'getId' }),\n  new Option({ name: 'Selecionar por um Estado', value: 'getByState' })];\n\n  @ViewChild('fileInput') fileInput: ElementRef;\n\n  @ViewChild('filter') filter: MatSelect;\n\n  @ViewChild('filterState') filterState: MatSelect;\n\n  @ViewChild('cityId') cityIdField: ElementRef;\n\n  constructor(private fb: FormBuilder,\n    private csvService: CsvService,\n    private cityService: CityService,\n    private stateService: StateService,\n    private snackBar: MatSnackBar) {\n    this.createForm();\n  }\n\n  /**\n   * Creates the FileInput form\n   */\n  createForm() {\n    this.form = this.fb.group({\n      file: ['', Validators.required]\n    });\n  }\n\n  /**\n   * Dectect fileInput Changes, and achieves the CSV service when dectect some file.\n   * @param event The Event who has fired the action\n   */\n  onFileChange(event) {\n    let reader = new FileReader();\n    if (event.target.files && event.target.files.length > 0) {\n      let file = event.target.files[0];\n      reader.readAsDataURL(file);\n      reader.onload = () => {\n        const selectedFile = (<any>reader.result).split(',');\n        this.fileName = file.name;\n        const base64File = selectedFile[1];\n        if (!!base64File) {\n          this.csvService.upload(base64File)\n            .subscribe(res => {\n              if (!!res.message) {\n                this.snackBar.open(<string>res.message, '', { duration: 2500 });\n              }\n            });\n        }\n      };\n    }\n  }\n\n  /**\n   * Actives FileInput action when click in the button.\n   */\n  openInput() {\n    this.fileInput.nativeElement.click();\n  }\n\n  /**\n   * Remove Last Selected File\n   */\n  clearFile() {\n    this.form.get('file').setValue(null);\n    this.fileInput.nativeElement.value = '';\n    this.fileName = '';\n  }\n  /**\n   * Makes the filter change, checking if need to add more fields\n   * @param event The Event who has fired the action\n   */\n  onChangeFilter() {\n    const value = this.filter.value;\n    if (!!value) {\n      if (value === 'getId') {\n        this.searchById = true;\n      } else {\n        this.searchById = false;\n      }\n      if (value === 'getByState') {\n        this.stateService.getAll().subscribe(message => {\n          if (!!message.message) {\n            this.snackBar.open(<string>message.message, '', { duration: 2500 });\n          } else if (!!message.payload) {\n            this.searchByState = true;\n            this.states = message.payload;\n          }\n        })\n      }\n    }\n  }\n  onSearch() {\n    const value = this.filter.value;\n    let endpoint: Endpoints = null;\n    let params: any = {};\n    if (!!value) {\n      if (value !== 'getId') {\n        switch (value) {\n          case 'orderByName':\n            endpoint = Endpoints.ORDER_BY_NAME;\n            break;\n          case 'orderByNameOnlyCaptals':\n            endpoint = Endpoints.ORDER_BY_NAME_ONLY_CAPITALS;\n            break;\n          case 'getByState':\n            const selectState = this.filterState.value;\n            if (!!selectState) {\n              endpoint = Endpoints.FILTER_BY_STATE;\n              params = {params: {\"stateId\": selectState}};\n            }\n            break;\n        }\n        if (!!endpoint) {\n          this.cityService.getAnyList(endpoint, params)\n            .subscribe((message: MessageEncapsuling<City[]>) => {\n              if (!!message.message) {\n                this.snackBar.open(<string>message.message, '', { duration: 2500 });\n              } else if (!!message.payload) {\n                this.cities = message.payload;\n              }\n            });\n        } else {\n          this.snackBar.open(\"ERRO: SELECIONE UMA OPÇÃO VÁLIDA\");\n        }\n      } else {\n        const selectedId = +this.cityIdField.nativeElement.value;\n        this.cityService.getCity(selectedId)\n          .subscribe((message: MessageEncapsuling<City>) => {\n            if (!!message.message) {\n              this.snackBar.open(<string>message.message, '', { duration: 2500 });\n            } else if (!!message.payload) {\n              this.cities = [message.payload];\n            }\n          });\n      }\n    } else {\n      this.snackBar.open(\"ERRO: SELECIONE UMA OPÇÃO VÁLIDA\", '', { duration: 2500 });\n    }\n  }\n  onRemove(id){\n    this.cityService.remove(id)\n      .subscribe(res => {\n        if (!!res.message) {\n          this.snackBar.open(<string>res.message, '', { duration: 2500 });\n        }\n        this.onSearch();\n      });\n  }\n}\n","module.exports = \".content{\\n    overflow-y: hidden;\\n}\"","module.exports = \"<h1 mat-dialog-title>Carregando...</h1>\\n<div mat-dialog-content class=\\\"content\\\">\\n  <mat-spinner></mat-spinner>\\n</div>\"","import { Component } from '@angular/core';\n\nimport { MatDialogRef } from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-loading-dialog',\n  templateUrl: './loading-dialog.component.html',\n  styleUrls: ['./loading-dialog.component.css']\n})\nexport class LoadingDialogComponent {\n\n  constructor(\n    private dialogRef: MatDialogRef<LoadingDialogComponent>){\n\n    }\n\n}\n","module.exports = \".spacer{\\n    flex: 1 1 auto;\\n}\\na {\\n    color: inherit; /* blue colors for links too */\\n    text-decoration: inherit; /* no underline */\\n    margin-right: 10px;\\n  }\"","module.exports = \"<mat-toolbar color=\\\"primary\\\">\\n  <mat-toolbar-row>\\n    <span>Projeto Cidades</span>\\n    <span class=\\\"spacer\\\"></span>\\n    <a [routerLink]=\\\"['/home']\\\">Início</a>\\n    <a [routerLink]=\\\"['/add']\\\">Nova Cidade</a>\\n    <a [routerLink]=\\\"['/curiosities']\\\">Curiosidades</a>\\n  </mat-toolbar-row>\\n</mat-toolbar>\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-toolbar',\n  templateUrl: './toolbar.component.html',\n  styleUrls: ['./toolbar.component.css']\n})\nexport class ToolbarComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n\n"],"sourceRoot":""}